# crea proyecto "wisdompets"
django-admin startproject wisdompets

# Nota: Desde aquí en adelante hay que estar en la carpeta del proyecto

# ejecutar servidor de testing
python manage.py runserver

# crear una app en el proyecto (se genera una carpeta nueva)
python manage.py startapp adoptions

# en /wisdompets/settings.py agregar una línea a INSTALLED_APPS
'adoptions', # nombre de la app

# MODELOS
# Tipos de datos:
IntegerField, DecimalField; CharField*, TextField*, EmailField, URLField; BooleanField, DateTimeField; ForeignKey, ManyToMany
(*) CharField requiere indicar un máximo de caracteres, TextField no.
# ejemplos:
models.CharField(max_length=10, null=True, blank=True)
# Algunos atributos:
max_length, null, blank, default, choices...

####
# MIGRACIONES

# Comandos: Crear migración
python manage.py makemigrations #crear

# consultar migraciones
python manage,py showmigrations

# Ejecutar migración
python manage.py migrate #ejecutar

# Se copio carpeta management/ dentro de adoptions/ con un script de importacion CSV -> SQL
python manage.py load_pet_data

# Luego de crear una clase en admin.py ...
# crear super usuario
python manage.py createsuperuser

# ejecutamos testing server para iniciar sesion
python manage.py runserver # en navegador visitar localhost:8000/admin

## ORM: query data
# en la consola
python manage.py shell

# en la shell que se inicia:
from adoptions.models import Pet
Pet.objects.all() # todos los objetos en la DB
pet = Pet.objects.all()[0] # captura la primera
pet.name # devuelve atributo 'name' de pet

# Se puede lograr lo mismo con el método get()
pet = Pet.objects.get(id=1)

# cuando el get no se hace a un 'id' puede ocurrir un error al haber más de un resultado

# consultar vacunas
pet.vaccinations.all()
#ejemplos:
In [23]: pet2.vaccinations.all()
Out[23]: <QuerySet []> # no tiene vacunas
In [25]: pet3.vaccinations.all()
Out[25]: <QuerySet [<Vaccine: Canine Parvo>, <Vaccine: Canine Distemper>, <Vaccine: Canine Rabies>, <Vaccine: Canine Leptospira>]>

###
# URL Patterns

# regex ejemplos
ducky : exactamente ducky
\d : 1 dígito numérico
\d+ : 1 o más dígitos
^admin/ : cualquier cadena que comience con "admin" /admin1313/index
suffix$ : cualquier cadena que termine en "suffix" /admin1313suffix
^$ : una cadena vacía

# recurso: https://pythex.org

# ejemplo en urlpattern del root '/' que se interpreta como vacío
$ urlpatterns = [
    url(r'^$', views.home, name='index'),
]

